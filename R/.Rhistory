#tmp1 <- -sum(P.hyp.cds*Q.hyp.cds) + 2 * P.hyp.cds[3]*Q.hyp.cds[3]
#tmp2 <- -sum(P.hyp.cds*P.hyp.cds) + 2 * P.hyp.cds[3]*P.hyp.cds[3]
#tmp3 <- -sum(Q.hyp.cds*Q.hyp.cds) + 2 * Q.hyp.cds[3]*Q.hyp.cds[3]
#return(acosh(tmp1/sqrt(tmp2*tmp3)))
return(my.hyp.dist(P.hyp.cds,Q.hyp.cds))
}
my.hyp.dist3. <- function(P,Q){
P.hyp.cds <- my.pdisk.coords.inv(P)
Q.hyp.cds <- my.pdisk.coords.inv(Q)
P.hyp.cds <- my.pdisk.coords.inv.cone(P)
Q.hyp.cds <- my.pdisk.coords.inv.cone(Q)
tmp1 <- -sum(P.hyp.cds*Q.hyp.cds) + 2 * P.hyp.cds[3]*Q.hyp.cds[3]
tmp2 <- -sum(P.hyp.cds*P.hyp.cds) + 2 * P.hyp.cds[3]*P.hyp.cds[3]
tmp3 <- -sum(Q.hyp.cds*Q.hyp.cds) + 2 * Q.hyp.cds[3]*Q.hyp.cds[3]
return(acosh(tmp1/sqrt(tmp2*tmp3)))
#return(my.hyp.dist(P.hyp.cds,Q.hyp.cds))
}
my.hyp.dist3(P,Q)
my.hyp.dist3.(P,Q)
my.hyp.dist2(P,Q)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
plot(x.,y.,pch=20,cex=0.01,asp=TRUE)
hypD1 <- apply(cbind(x.,y.),1,my.hyp.dist2,c(x.[1],y.[1]))
hypD2 <- apply(cbind(x.,y.),1,my.hyp.dist3,c(x.[1],y.[1]))
plot(hypD1,hypD2)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD1 <- apply(cbind(x.,y.),1,my.hyp.dist2,c(x.[1],y.[1]))
col <- ceiling(d/max(d)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD1 <- apply(cbind(x.,y.),1,my.hyp.dist2,c(x.[1],y.[1]))
col <- ceiling(hypD1/max(hypD1)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
P <- rnorm(2) * 1
Q <- rnorm(2) *1
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
t <- seq(from=0,to=1,1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
s <- which(apply(pnts^2,1,sum) < 1)
pnts <- pnts[s]
plot(cos(t),sin(t),type="l",asp=1,xlim=c(-5,5),ylim=c(-5,5))
points(pnts,type="l",col=i+1)
P <- rnorm(2) * 1
Q <- rnorm(2) *1
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
t <- seq(from=0,to=1,1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
s <- which(apply(pnts^2,1,sum) < 1)
pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=i+1)
t
P <- rnorm(2) * 1
Q <- rnorm(2) *1
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
s <- which(apply(pnts^2,1,sum) < 1)
pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=i+1)
P <- rnorm(2) * 1
Q <- rnorm(2) *1
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
s <- which(apply(pnts^2,1,sum) < 1)
pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
help(min.id)
??min.id
help(min)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- matrix(0,n,length(pnts[,1]))
for(i in 1:length(pnts[,])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[i] <- min(tmp)
}
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- matrix(0,n,length(pnts[,1]))
for(i in 1:length(pnts[,1])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[i] <- min(tmp)
}
col <- ceiling(hypD.geod/max(hypD.geod)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
plot(hypD.geod)
pnts[1,]
tmp
hist(tmp)
min(tmp)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- rep(0,length(pnts[,1]))
for(i in 1:length(pnts[,1])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[i] <- min(tmp)
}
col <- ceiling(hypD.geod/max(hypD.geod)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
plot(hypD.geod)
n <- 1000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- matrix(0,n,length(pnts[,1]))
for(i in 1:length(pnts[,1])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[,i] <- tmp
}
n <- 1000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- matrix(0,length(s),length(pnts[,1]))
for(i in 1:length(pnts[,1])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[,i] <- tmp
}
hypD.geod.min <- apply(hypD.geod,1,min)
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
n <- 10000
x. <- runif(n,min=-1,max=1)
y. <- runif(n,min=-1,max=1)
r2 <- x.^2 + y.^2
s <- which(r2 < 1)
x. <- x.[s]
y. <- y.[s]
hypD.geod <- matrix(0,length(s),length(pnts[,1]))
for(i in 1:length(pnts[,1])){
tmp <- apply(cbind(x.,y.),1,my.hyp.dist2,pnts[i,])
hypD.geod[,i] <- tmp
}
hypD.geod.min <- apply(hypD.geod,1,min)
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
points(pnts,type="l",col=2)
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
points(pnts,type="l",col=2)
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
points(pnts,type="l",col=2)
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
points(pnts,type="l",col=2,cex=2)
help("points")
col <- ceiling(hypD.geod.min/max(hypD.geod.min)*10)
plot(x.,y.,pch=20,cex=1,asp=TRUE,col=col)
points(pnts,type="l",col=2,lwd=2)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
#s <- which(apply(pnts^2,1,sum) < 1)
pnts <- pnts[s,]
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
#s <- which(apply(pnts^2,1,sum) < 1)
#pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
#s <- which(apply(pnts^2,1,sum) < 1)
#pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
#s <- which(apply(pnts^2,1,sum) < 1)
#pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
n.line <- 10
t.samples <- sample(1:length(t),n.line)
for(i in 1:n.line){
P <- c(cos(theta),sin(theta)) # 内接点
Q <- pnts[t.samples[i],]
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
points(pnts,type="l",col=i+1)
}
t.samples
dim(pnts)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
n.line <- 10
t.samples <- sample(1:length(t),n.line)
for(i in 1:n.line){
P <- c(cos(theta),sin(theta)) # 内接点
Q <- pnts[t.samples[i],]
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
tmp.pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
points(tmp.pnts,type="l",col=i+1)
}
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r*dnorm(x,m1,sd1) + (1-r) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
plot(ps[1,])
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
r
ps
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
image(ipmat)
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
eigen.out[[1]]
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols]))
plot(x.time)
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
x.time[,1]^2 - x.time[,2]^2
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
n.sample <- 200
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
n.sample <- 200
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 1
sd2 <- 1
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
abs(eigen.out[[1]][cols])
eigen.out[[2]][,cols]
apply(eigen.out[[2]][,cols],2,range)
apply(x.time,2,range)
# ベクトルxの最後の座標が時間軸とする
my.pdisk.coords.R <- function(x){
t <- x[length(x)]
x. <- x[-length(x)]
R <- sqrt(-sum(x^2) + 2 * t^2)
u <- R*x./(R+t)
return(list(u=u,R=R))
}
my.pdisk.coords.inv.R <- function(u,R){
t <- R * (R^2+sum(u^2))/(R^2-sum(u^2))
x. <- 2*R^2*u/(R^2-sum(u^2))
return(c(x.,t))
}
x <- 0.4
y <- 0.3
z <- sqrt(x^2+y^2+1)
my.pdisk.coords(c(x,y,z))
my.pdisk.coords.R(c(x,y,z))
x <- 0.4
y <- 0.3
z <- sqrt(x^2+y^2+1)
u1 <- my.pdisk.coords(c(x,y,z))
u2 <- my.pdisk.coords.R(c(x,y,z))
print(u1)
print(u2)
my.pdisk.coords.inv(u1)
my.pdisk.coords.inv.R(u2$u,u2$R)
out <- my.pdisk.coords.R(x.time)
x.time
x.time[1,1]^2 - x.time[1.2]^2
x.time[1,1]^2 - x.time[1,2]^2
x <- x.time[1,]
x
t <- x[length(x)]
x. <- x[-length(x)]
R <- sqrt(-sum(x^2) + 2 * t^2)
u <- R*x./(R+t)
u
R
out <- apply(x.time,1,my.pdisk.coords.R)
dim(out)
out
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
dim(out)
plot(out[,1])
plot(out[,2])
plot(out)
library(rgl)
plot3d(cbind(out,r))
plot(r,x.time[,1])
plot(out[,2],r)
plot(out[,1],r)
out[,1]
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- matrix(unlist(apply(x.time,1,my.pdisk.coords)),ncol=2,byrow=TRUE)
plot(out[,1],out.)
dim(out)
length(out.)
out.
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- apply(x.time,1,my.pdisk.coords)
plot(out[,1],out.)
out.
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- apply(cbind(rep,0,length(x.time[,1]),x.time),1,my.pdisk.coords)
dim(x.time)
rep(0,length(x.time[,1]))
x.time
range(x.time[,2])
out <- matrix(unlist(apply(-x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
#out. <- apply(cbind(rep,0,length(x.time[,1]),x.time),1,my.pdisk.coords)
plot3d(cbind(out,r))
plot(out)
plot3d(cbind(out,r))
getwd()
setwd("C:/Users/ryamada/Desktop/git/atom/R/")
